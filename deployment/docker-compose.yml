version: '3.4'

# Common Django template for Geonode, Celery and Celerycam services below
x-common-django:
  &default-common-django
  image: kartoza/igrac_ggis:${VERSION}
  build:
    context: ../
    dockerfile: deployment/docker/Dockerfile
    target: prod
  env_file:
    - .env
  volumes:
    #    - ../geonode:/geonode
    - ../django_project:/home/web/django_project
    - ./volumes/statics:/home/web/statics:rw
  restart: on-failure
  depends_on:
    - db

services:
  # Vanilla RabbitMQ service. This is needed by celery
  rabbitmq:
    image: rabbitmq:3.7-alpine
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    restart: on-failure

  # postfix with smtp authentication (sasldb) TLS and OpenDKIM support are optional
  smtp:
    image: catatnight/postfix
    environment:
      maildomain: "${DJANGO_EMAIL_HOST}"
      smtp_user: "${DJANGO_EMAIL_HOST_USER}:${DJANGO_EMAIL_HOST_PASSWORD}"
    restart: unless-stopped

  # Our custom django application. It includes Geonode.
  django:
    <<: *default-common-django
    entrypoint: [ "/entrypoint.sh" ]
    command: 'uwsgi --ini /uwsgi.conf'

  nginx:
    image: nginx
    hostname: nginx
    volumes:
      - ./nginx/sites-enabled:/etc/nginx/conf.d:ro
      - ./nginx/pages:/pages:ro
      - ./volumes/logs:/var/log/nginx
      - ./volumes/statics/static:/home/web/static:ro
      - ./volumes/statics/media:/home/web/media:ro
      - ./volumes/statics/temp:/home/web/temp:ro
      - ./volumes/statics/gwml2:/home/web/gwml2:ro
    ports:
      - "${HTTP_PORT}:80"
    restart: unless-stopped

  # Geoserver backend
  geoserver:
    image: kartoza/sadc_gip:geoserver-3.1.netcfd
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8080/geoserver/rest/workspaces/geonode.html"
      interval: 60s
      timeout: 10s
      retries: 1
      start_period: 60s
    environment:
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTPS_PORT=${HTTPS_PORT}
      - HTTP_HOST=${HTTP_HOST}
      - HTTP_PORT=${HTTP_PORT}
      - ADMIN_USERNAME=${GEOSERVER_ADMIN_USER}
      - ADMIN_PASSWORD=${GEOSERVER_ADMIN_PASSWORD}
      - DATABASE_URL=postgres://${GEONODE_DATABASE_USER}:${GEONODE_DATABASE_PASSWORD}@db:5432/${GEONODE_DATABASE}
      - GEODATABASE_URL=postgis://${GEONODE_GEODATABASE_USER}:${GEONODE_GEODATABASE_PASSWORD}@db:5432/${GEONODE_GEODATABASE}
    volumes:
      - geodatadir:/spcgeonode-geodatadir/
    ports:
      - "8080:8080"
    depends_on:
      - db
    restart: on-failure

  # PostGIS database.
  db:
    # use geonode official postgis 10 image
    image: kartoza/postgis:13
    environment:
      # database info, ${variables} are read from .env
      - POSTGRES_DBNAME=${GEONODE_DATABASE},${GEONODE_GEODATABASE},groundwater
      - POSTGRES_USER=${GEONODE_DATABASE_USER}
      - POSTGRES_PASSWORD=${GEONODE_DATABASE_PASSWORD}
    volumes:
      - database:/var/lib/postgresql/data/
      - ./backups:/backups
    restart: on-failure
    ports:
      - "25432:5432"
    healthcheck:
      test: "pg_isready -d postgres -U postgres"

  # Celery worker that executes celery tasks created by Django.
  celery:
    <<: *default-common-django
    entrypoint: [ ]
    command: 'celery -A geonode.celery_app:app worker -B -E --statedb=worker.state -s celerybeat-schedule --loglevel=DEBUG --concurrency=10 -n worker1@%h'

  # django application for development
  dev:
    <<: *default-common-django
    image: kartoza/igrac_ggis:${VERSION}-dev
    entrypoint: [ ]
    build:
      context: ../
      dockerfile: deployment/docker/Dockerfile
      target: dev
    depends_on:
      - geoserver
      - db
      - celery
    ports:
      # for django test server
      - "3002:8080"
      # for ssh
      - "3003:22"

volumes:
  database:
  geodatadir:
  certificates:
  pgdumps:
  rabbitmq:
